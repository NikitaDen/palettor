{"version":3,"sources":["assets/images/lock.svg","assets/images/unlock.svg","assets/images/close.svg","assets/images/list.svg","assets/images/gradient.svg","assets/images/palette.svg","redux/palette-reducer.jsx","components/NavMenu/NavMenu.jsx","components/Header/Header.jsx","components/Palette/PaletteItem/PaletteItem.jsx","components/Palette/Interactions/Interactions.jsx","components/Palette/Palette.jsx","components/Info/Info.jsx","components/Main/Main.jsx","redux/gradients-reducer.jsx","components/Gradients/Gradients.jsx","components/CopiedAlert/CopiedAlert.jsx","App.jsx","serviceWorker.js","redux/redux-store.jsx","index.jsx"],"names":["module","exports","initialState","palette","color","Math","floor","random","toString","locked","id","showInfo","showCopied","showAppInfo","visible","type","setShowCopied","paletteReducer","state","action","map","colorId","NavMenuContainer","connect","palettePage","props","className","to","HeaderContainer","onClick","PaletteItem","useState","showButtons","setShowButtons","activateButtons","deactivateButtons","copyColor","e","target","select","document","execCommand","item","key","style","backgroundColor","onMouseEnter","onMouseLeave","opacity","readOnly","onFocus","onBlur","value","lockColor","src","unlockImage","lockImage","alt","Interactions","newColors","refreshPalette","PaletteContainer","InfoContainer","listStyleImage","list","close","MainContainer","gradient","rgba","ceil","addRgba","linearGradient","gradientsReducer","GradientsContainer","gradientsPage","refreshGradients","background","CopiedAlertContainer","animation","App","path","render","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86528d15.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lock.69ed3da6.svg\";","module.exports = __webpack_public_path__ + \"static/media/unlock.b09efb2e.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.22138547.svg\";","module.exports = __webpack_public_path__ + \"static/media/list.0f4d1425.svg\";","module.exports = __webpack_public_path__ + \"static/media/gradient.f6faea6d.svg\";","module.exports = __webpack_public_path__ + \"static/media/palette.2b6a47a0.svg\";","const REFRESH_PALETTE = 'REFRESH_PALETTE';\r\nconst LOCK_COLOR = 'LOCK_COLOR';\r\nconst SHOW_INFO = 'SHOW_INFO';\r\nconst SHOW_COPIED = 'SHOW_COPIED';\r\n\r\nconst initialState = {\r\n    palette: [\r\n        {color: `#${Math.floor(Math.random() * 16777215).toString(16)}`, locked: false, id: 1},\r\n        {color: `#${Math.floor(Math.random() * 16777215).toString(16)}`, locked: false, id: 2},\r\n        {color: `#${Math.floor(Math.random() * 16777215).toString(16)}`, locked: false, id: 3},\r\n        {color: `#${Math.floor(Math.random() * 16777215).toString(16)}`, locked: false, id: 4},\r\n        {color: `#${Math.floor(Math.random() * 16777215).toString(16)}`, locked: false, id: 5},\r\n    ],\r\n    showInfo: false,\r\n    showCopied: false,\r\n};\r\n\r\nconst paletteReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REFRESH_PALETTE:\r\n            return {\r\n                ...state,\r\n                palette: state.palette.map(color => {\r\n                    if (color.locked === false) {\r\n                        return {\r\n                            ...color,\r\n                            color: `#${Math.floor(Math.random() * 16777215).toString(16)}`\r\n                        };\r\n                    }\r\n                    return color;\r\n                })\r\n            };\r\n        case LOCK_COLOR:\r\n            return {\r\n                ...state,\r\n                palette: state.palette.map(color => {\r\n                    if (action.colorId === color.id) {\r\n                        return {\r\n                            ...color,\r\n                            locked: !action.locked,\r\n                        }\r\n                    }\r\n                    return color;\r\n                })\r\n            };\r\n        case SHOW_INFO:\r\n            return {\r\n                ...state,\r\n                showInfo: !action.visible,\r\n            };\r\n        case SHOW_COPIED:\r\n            return {\r\n                ...state,\r\n                showCopied: !action.showCopied,\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const refreshPalette = (palette, locked) => ({type: REFRESH_PALETTE, palette, locked});\r\nexport const lockColor = (locked, colorId) => ({type: LOCK_COLOR, locked, colorId});\r\nexport const showAppInfo = (visible) => ({type: SHOW_INFO, visible});\r\nexport const setShowCopied = (showCopied) => ({type: SHOW_COPIED, showCopied});\r\n\r\nexport default paletteReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {showAppInfo} from \"../../redux/palette-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst NavMenu = (props) => {\r\n    return (\r\n        <div className='navMenu'>\r\n            <NavLink to='/main'>\r\n                <p>Main</p>\r\n            </NavLink>\r\n            <NavLink to='/palette'>\r\n                <p>Palette</p>\r\n            </NavLink>\r\n            <NavLink to='/gradients'>\r\n                <p>Gradients</p>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst stateToProps = (state) => {\r\n    return {\r\n        showInfo: state.palettePage.showInfo,\r\n    }\r\n};\r\n\r\nconst NavMenuContainer = connect(stateToProps, {showAppInfo})(NavMenu);\r\n\r\nexport default NavMenuContainer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {showAppInfo} from \"../../redux/palette-reducer\";\r\nimport NavMenuContainer from \"../NavMenu/NavMenu\";\r\n\r\nconst Header = (props) => {\r\n    const showAppInfo = (visible) => {\r\n        props.showAppInfo(visible);\r\n    };\r\n\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Pickolor.</h1>\r\n            <NavMenuContainer/>\r\n            <button onClick={() => showAppInfo(props.showInfo)} className=\"button button--info\">?</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst stateToProps = (state) => {\r\n    return {\r\n        showInfo: state.palettePage.showInfo,\r\n    }\r\n};\r\n\r\nconst HeaderContainer = connect(stateToProps, {showAppInfo})(Header);\r\n\r\nexport default HeaderContainer;","import React, {useState} from \"react\";\r\nimport lockImage from \"./../../../assets/images/lock.svg\";\r\nimport unlockImage from \"./../../../assets/images/unlock.svg\";\r\n\r\nconst PaletteItem = (props) => {\r\n    let [showButtons, setShowButtons] = useState(false);\r\n\r\n    const activateButtons = () => {\r\n        setShowButtons(true);\r\n    };\r\n\r\n    const deactivateButtons = () => {\r\n        setShowButtons(false);\r\n    };\r\n\r\n    const toggleLockColor = (locked, id) => {\r\n        props.lockColor(locked, id);\r\n    };\r\n\r\n    const copyColor = (e) => {\r\n        let copyText = e.target;\r\n        copyText.select();\r\n        document.execCommand(\"copy\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"palette__container\">\r\n            {props.palette.map(item => {\r\n                return (\r\n                    <div key={item.id}\r\n                         className=\"palette__container__item\"\r\n                         style={{backgroundColor: item.color}}>\r\n                        <div onMouseEnter={activateButtons}\r\n                             onMouseLeave={deactivateButtons}\r\n                             className=\"palette__container__buttons\"\r\n                             style={showButtons ? {opacity: \"1\"} : {opacity: \"0\"}}>\r\n                            <input onClick={copyColor}\r\n                                   readOnly={true} type=\"text\" className='myColor'\r\n                                   onFocus={() => props.setShowCopied(props.showCopied)}\r\n                                   onBlur={() => props.setShowCopied(props.showCopied)}\r\n                                   value={item.color}/>\r\n                            <img onClick={() => toggleLockColor(item.locked, item.id)}\r\n                                 className=\"button button--lock\"\r\n                                 src={item.locked ? unlockImage : lockImage} alt={item.locked ? 'Lock color' : 'Unlock color'}/>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default PaletteItem;","import React from \"react\";\r\n\r\nconst Interactions = (props) => {\r\n    const refreshPalette = (newColors) => {\r\n        props.refreshPalette(newColors);\r\n    };\r\n\r\n    const copyColor = (e) => {\r\n        let copyText = e.target;\r\n        copyText.select();\r\n        document.execCommand(\"copy\");\r\n    };\r\n\r\n    return (\r\n        <div className='interactions'>\r\n            <button className='button button--refresh' onClick={() => {\r\n                refreshPalette(props.palette);\r\n            }}>Generate</button>\r\n            <input type=\"text\" className=\"summary-values\" onFocus={() => props.setShowCopied(props.showCopied)} onBlur={() => props.setShowCopied(props.showCopied)} onClick={copyColor} value={props.palette.map(color => ' ' + color.color)} readOnly={true}/>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Interactions;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {lockColor, refreshPalette, setShowCopied} from \"../../redux/palette-reducer\";\r\nimport PaletteItem from \"./PaletteItem/PaletteItem\";\r\nimport Interactions from \"./Interactions/Interactions\";\r\n\r\nconst Palette = (props) => {\r\n    return (\r\n        <div>\r\n            <PaletteItem {...props}/>\r\n            <Interactions {...props} />\r\n        </div>\r\n    )\r\n};\r\n\r\nlet stateToProps = (state) => ({\r\n    palette: state.palettePage.palette,\r\n    locked: state.palettePage.locked,\r\n    showCopied: state.palettePage.showCopied,\r\n});\r\n\r\nconst PaletteContainer = connect(stateToProps, {refreshPalette, lockColor, setShowCopied})(Palette);\r\n\r\nexport default PaletteContainer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {showAppInfo} from \"../../redux/palette-reducer\";\r\nimport close from \"../../assets/images/close.svg\";\r\nimport list from \"../../assets/images/list.svg\";\r\n\r\nconst Info = (props) => {\r\n    if (props.showInfo) {\r\n        return (\r\n            <ul style={{listStyleImage: `url(${list})`}} className=\"info\">\r\n                <button className=\"button\" onClick={() => props.showAppInfo(props.showInfo)}>\r\n                    <img className=\"button--close\" src={close} alt=\"Close\"/>\r\n                </button>\r\n                <li>Tap Generate button to refresh your palette;</li>\r\n                <li>Hover color to see more options;</li>\r\n                <li>By clicking Lock you can lock/unlock favorite colors and continue generate another colors;</li>\r\n                <li>You can copy any color-code to clipboard by clicking it;</li>\r\n                <h3>Let's find palette for you!</h3>\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return <div/>\r\n};\r\n\r\nconst stateToProps = (state) => {\r\n    return {\r\n        showInfo: state.palettePage.showInfo,\r\n    }\r\n};\r\n\r\nconst InfoContainer = connect(stateToProps, {showAppInfo})(Info);\r\nexport default InfoContainer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {showAppInfo} from \"../../redux/palette-reducer\";\r\nimport gradient from \"../../assets/images/gradient.svg\";\r\nimport palette from \"../../assets/images/palette.svg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst Main = (props) => {\r\n    return (\r\n        <div className='main'>\r\n            <div>\r\n                <h1>Pickolor.</h1>\r\n                <p>It's your easy way to find color that you want!</p>\r\n            </div>\r\n            <div className=\"main__options\">\r\n                <NavLink to='/palette'>\r\n                    <div className=\"main__options__item\">\r\n                        <img src={palette} alt=\"palette\"/>\r\n                        <p>Choose palette for your project</p>\r\n                    </div>\r\n                </NavLink>\r\n                <NavLink to='/gradients'>\r\n                    <div className=\"main__options__item\">\r\n                        <img src={gradient} alt=\"gradient\"/>\r\n                        <p>Find perfect gradient</p>\r\n                    </div>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst stateToProps = (state) => {\r\n    return {\r\n        showInfo: state.palettePage.showInfo,\r\n    }\r\n};\r\n\r\nconst MainContainer = connect(stateToProps, {showAppInfo})(Main);\r\n\r\nexport default MainContainer;","const REFRESH_GRADIENT = 'REFRESH_GRADIENT';\r\n\r\nfunction rgba() {\r\n    return `rgb(${Math.ceil(Math.random() * 255)}, ${Math.ceil(Math.random() * 255)}, ${Math.ceil(Math.random() * 255)})`\r\n}\r\n\r\nfunction addRgba() {\r\n    let i = Math.ceil(Math.random() * 3);\r\n    switch (i) {\r\n        case 1:\r\n        case 2:\r\n            return `${rgba()}, ${rgba()}`;\r\n        case 3:\r\n            return `${rgba()}, ${rgba()}, ${rgba()}`;\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    gradient: [\r\n        {linearGradient: `linear-gradient(${Math.ceil(Math.random() * 360)}deg, ${addRgba()})`, id: 1},\r\n        {linearGradient: `linear-gradient(${Math.ceil(Math.random() * 360)}deg, ${addRgba()})`, id: 2},\r\n        {linearGradient: `linear-gradient(${Math.ceil(Math.random() * 360)}deg, ${addRgba()})`, id: 3},\r\n    ]\r\n};\r\n\r\nconst gradientsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REFRESH_GRADIENT:\r\n            return {\r\n                ...state,\r\n                gradient: state.gradient.map(item => ({\r\n                    ...item,\r\n                    linearGradient: `linear-gradient(${Math.ceil(Math.random() * 360)}deg, ${addRgba()})`\r\n                }))\r\n            };\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const refreshGradients = () => ({type: REFRESH_GRADIENT});\r\n\r\nexport default gradientsReducer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {refreshGradients} from \"../../redux/gradients-reducer\";\r\nimport {setShowCopied} from \"../../redux/palette-reducer\";\r\n\r\nconst Gradients = (props) => {\r\n    const copyColor = (e) => {\r\n        let copyText = e.target;\r\n        copyText.select();\r\n        document.execCommand(\"copy\");\r\n    };\r\n\r\n    return (\r\n        <div className='gradients'>\r\n            {props.gradient.map(item => {\r\n                return (\r\n                    <div key={item.id}>\r\n                        <div style={{background: item.linearGradient}} className='gradient'>\r\n                        </div>\r\n                        <textarea type=\"text\" className=\"gradient-values\"\r\n                               onFocus={() => props.setShowCopied(props.showCopied)}\r\n                               onBlur={() => props.setShowCopied(props.showCopied)}\r\n                               onClick={copyColor}\r\n                               value={item.linearGradient}\r\n                               readOnly={true}\r\n                        />\r\n                    </div>\r\n                )\r\n            })}\r\n            <button className='button button--gradient' onClick={props.refreshGradients}>Change</button>\r\n        </div>\r\n    )\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n    gradient: state.gradientsPage.gradient,\r\n    showCopied: state.palettePage.showCopied,\r\n});\r\n\r\nconst GradientsContainer = connect(mapStateToProps, {refreshGradients, setShowCopied})(Gradients);\r\n\r\nexport default GradientsContainer;","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {showAppInfo} from \"../../redux/palette-reducer\";\r\n\r\nconst CopiedAlert = (props) => {\r\n    return (\r\n        <div className={'showCopied'} style={props.showCopied ? {animation: 'show 2s ease-in-out'} : {animation: 'none'}}>\r\n            <h2>Copied</h2>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        showCopied: state.palettePage.showCopied,\r\n    }\r\n};\r\n\r\nconst CopiedAlertContainer = connect(mapStateToProps, {showAppInfo})(CopiedAlert);\r\n\r\nexport default CopiedAlertContainer;","import React from 'react';\nimport './assets/styles/styles.scss'\nimport Header from \"./components/Header/Header\";\nimport PaletteContainer from \"./components/Palette/Palette\";\nimport Info from \"./components/Info/Info\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport MainContainer from \"./components/Main/Main\";\nimport GradientsContainer from \"./components/Gradients/Gradients\";\nimport CopiedAlertContainer from \"./components/CopiedAlert/CopiedAlert\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header/>\n            <Switch>\n                <Route path='/palette' render={() => <PaletteContainer/>}/>\n                <Route path='/main' render={() => <MainContainer/>}/>\n                <Route path='/gradients' render={() => <GradientsContainer/>}/>\n                <Redirect to={'/main'} />\n            </Switch>\n            <CopiedAlertContainer/>\n            <Info/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers, createStore} from \"redux\";\r\nimport paletteReducer from \"./palette-reducer\";\r\nimport gradientsReducer from \"./gradients-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    palettePage: paletteReducer,\r\n    gradientsPage: gradientsReducer,\r\n});\r\n\r\nconst store = createStore(reducers);\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/redux-store\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\n\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}